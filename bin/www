#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');

let cluster = require('cluster');
const numCPUs = require('os').cpus().length;

const log4js = require('log4js');
log4js.configure('./log4js.config.json');

//logger
const systemLogger = log4js.getLogger();

// スケジューリングポリシーをラウンドロビンに設定
cluster.schedulingPolicy = cluster.SCHED_RR;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

if (cluster.isMaster) {

  // サブプロセスをOSのコア数分生成する

  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  // 落ちた場合、別のサブプロセスを新しく起動
  cluster.on('exit', function(worker, code, signal) {
    systemLogger.info('Worker ' + worker.process.pid + ' died.');
    cluster.fork();
  });

  // サブプロセスの起動をログ出力
  cluster.on('listening', function(worker, address) {
    systemLogger.info('Worker started with PID ' + worker.process.pid + '.');
  });

}else{

  // Webサーバ起動
  var server = http.createServer(app);

  // 指定されたPortで待機
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}


// ポートを正規化
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// エラー時のイベントリスナー
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // エラー処理
  switch (error.code) {
    case 'EACCES':
      systemLogger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      systemLogger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// listen時のイベントリスナー
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    systemLogger.debug('Listening on ' + bind);
}
